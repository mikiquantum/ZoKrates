import "./pedersenTree2.code" as verifyMerkleHash2
import "./pedersenTree3.code" as verifyMerkleHash3
import "hashes/sha256/512bitPadded.code" as sha512
import "hashes/sha256/1024bitPadded.code" as sha1024
import "utils/pack/pack256.code" as pack256
import "utils/pack/unpack128.code" as unpack128
import "utils/casts/1024to256array.code" as splitTo256bitChunks
import "signatures/verifyEddsa.code" as verifyEddsa
import "ecc/babyjubjubParams.code" as context
import "PACKING/split" as split

def concatBuyerRatingProofValue(field[160] buyerID, field[256] buyerPubkey, field[8] buyerRating) -> (field[512]):

	field[424] data = [... buyerID, ...buyerPubkey, ...buyerRating]
	field[88] padding = [0; 88]

	field[512] out = [...data, ...padding]
	return out
	
def concatInvoiceBuyerLeaf(field[256] property, field[160] buyerValue, field[256] salt) ->(field[1024]):

	field[672] data = [...property, ...buyerValue, ...salt]
	field[352] padding = [0; 352]

	field[1024] out = [...data, ...padding]
	return out

def main(field[2] creditRatingRootHashField, field buyerRatingField, privatefield[160] buyerID, privatefield[256] buyerPubkey, privatefield[2] directionCreditRatingTree, privatefield[256] creditRatingTreeDigest0, privatefield[256] creditRatingTreeDigest1, field nftAmount, field[2] documentRootHashField, privatefield[256] invoiceAmountValue, privatefield[256] invoiceAmountProperty, privatefield[256] invoiceAmountSalt, privatefield[3] invoiceAmountTreeDirection, privatefield[256] invoiceAmountTreeDigests0, privatefield[256] invoiceAmountTreeDigests1, privatefield[256] invoiceAmountTreeDigests2, privatefield[160] invoiceBuyerValue, privatefield[256] invoiceBuyerProperty, privatefield[256] invoiceBuyerSalt, privatefield[3] invoiceBuyerTreeDirection, privatefield[256] invoiceBuyerTreeDigests0, privatefield[256] invoiceBuyerTreeDigests1, privatefield[256] invoiceBuyerTreeDigests2, privatefield[2] SignatureR, privatefield SignatureS, privatefield[2] BuyerPubKey) -> (field):
	context = context()

	field[128] creditRatingRootHash0 = unpack128(creditRatingRootHashField[0])
	field[128] creditRatingRootHash1 = unpack128(creditRatingRootHashField[1])
	field[256] creditRatingRootHash = [...creditRatingRootHash0, ...creditRatingRootHash1]

	// Verifies that the buyer is in the registry and the score matches
	field[254] buyerRatingFieldBits  = split(buyerRatingField)
	field[8] buyerRating = buyerRatingFieldBits[246..254]
	field[512] buyerRatingProofValue  = concatBuyerRatingProofValue(buyerID, buyerPubkey, buyerRating)
	field[256] leafCreditRatingTree = sha512(buyerRatingProofValue[0..256], buyerRatingProofValue[256..512])
	field ratingTreeResult = verifyMerkleHash2(creditRatingRootHash, leafCreditRatingTree, directionCreditRatingTree,creditRatingTreeDigest0, creditRatingTreeDigest1)

	// // Verfies that the document is owned by the buyer
	field[128] documentRootHash0 = unpack128(documentRootHashField[0])
	field[128] documentRootHash1 = unpack128(documentRootHashField[1])
	field[256] documentRootHash = [...documentRootHash0, ...documentRootHash1]

	field[256] padding = [0; 256]
	field[256] leafInvoiceAmountTree = sha1024(invoiceAmountProperty, invoiceAmountValue, invoiceAmountSalt, padding)
	field invoiceAmountTreeResult = verifyMerkleHash3(documentRootHash, leafInvoiceAmountTree, invoiceAmountTreeDirection, invoiceAmountTreeDigests0, invoiceAmountTreeDigests1, invoiceAmountTreeDigests2)
	
	field[1024] invoiceBuyerTreeValue = concatInvoiceBuyerLeaf(invoiceBuyerProperty, invoiceBuyerValue, invoiceBuyerSalt)
	a, b, c, d = splitTo256bitChunks(invoiceBuyerTreeValue) 
	field[256] leafInvoiceBuyerTree = sha1024(a, b, c, d)
	field invoiceBuyerTreeResult = verifyMerkleHash3(documentRootHash, leafInvoiceBuyerTree, invoiceBuyerTreeDirection, invoiceBuyerTreeDigests0, invoiceBuyerTreeDigests1, invoiceBuyerTreeDigests2)

	// Ensures that the signature is valid 
	field isVerified = verifyEddsa(SignatureR, SignatureS, BuyerPubKey, documentRootHash, padding, context)

	// NFT amount needs to be smaller than invoice amount
	invoiceAmountValueField = pack256(invoiceAmountValue)
    field out = if invoiceAmountValueField > nftAmount then 1 else 0 fi

	return 1 
